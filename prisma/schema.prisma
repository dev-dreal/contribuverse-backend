generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("AZURE_DATABASE_CONNECTING_STRING")
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  profileImage String     @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ0eFYtMaXpWfthEAKY-smUSscnI0GjPGfTWdfaBYEBF1HhPucmwHF9ESBdEYqjz63ocxM&usqp=CAU") @map("profile_images")
  blogs        Blog[]
  followers    Follower[]
  bookMarks    BookMark[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("users")
}

model Follower {
  id              String   @id @default(uuid())
  follower        Int
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  followingUserId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@map("followers")
}

model Blog {
  id        String    @id @default(uuid())
  title     String
  content   String    @db.Text
  imageUrl  String    @map("image_urls")
  category  Category  @default(TECH)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  likes     Like[]
  tags      Tag[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@map("blogs")
}

enum Category {
  TECH
  ANDROID
  AI_ML
  WEB
  JOBS
  STARTUPS
  UI_UX
  BOOKS
  DATABASES
}

model Like {
  id        String   @id @default(uuid())
  like      Int
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@map("likes")
}

model Tag {
  id        String   @id @default(uuid())
  tag       String
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@map("comments")
}

model BookMark {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  itemId    String
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("book_marks")
}
